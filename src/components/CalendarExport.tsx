import React, { useState } from 'react';
import { Calendar, Download } from 'lucide-react';
import { estimateTSS } from '../lib/workoutUtils';
import { 
  generateICSContent, 
  downloadICSFile, 
  type CalendarEvent 
} from '../lib/calendarExport';

interface CalendarExportProps {
  data: any[];
  planStartDate: Date;
  actualTSSData: Record<string, number>;
}

export const CalendarExport: React.FC<CalendarExportProps> = ({
  data,
  planStartDate,
  actualTSSData
}) => {
  const [isExporting, setIsExporting] = useState(false);

  const generateCalendarEvents = (): CalendarEvent[] => {
    const events: CalendarEvent[] = [];

    for (let i = 0; i < data.length; i += 2) {
      const weekRow = data[i];
      const descriptionRow = data[i + 1];

      if (!weekRow || !descriptionRow) continue;

      const weekIndex = Math.floor(i / 2);
      const weekStartDate = new Date(planStartDate);
      weekStartDate.setDate(planStartDate.getDate() + weekIndex * 7);

      const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];

      days.forEach((day, dayIndex) => {
        const training = weekRow[day] || '';
        const description = descriptionRow[day] || '';

        // Skip empty days or rest days
        if (!training || training.toLowerCase() === 'rest') {
          return;
        }

        const workoutDate = new Date(weekStartDate);
        workoutDate.setDate(weekStartDate.getDate() + dayIndex);

        // For all-day events, we just need the date
        const startDate = new Date(workoutDate);
        startDate.setHours(0, 0, 0, 0);
        
        // End date for all-day events should be the next day
        const endDate = new Date(workoutDate);
        endDate.setDate(workoutDate.getDate() + 1);
        endDate.setHours(0, 0, 0, 0);

        let title = 'Rest day';
        
        if (training && training.toLowerCase() !== 'rest') {
          if (training.toLowerCase().includes('x-train')) {
            title = 'Cross Training';
          } else {
            const miles = parseFloat(training);
            if (!isNaN(miles) && miles > 0) {
              title = `${training} mile run`;
            } else {
              title = training;
            }
          }
        }

        const plannedTSS = estimateTSS(training, description);
        const workoutKey = `${weekIndex}-${dayIndex}`;
        const actualTSS = actualTSSData[workoutKey];

        let eventDescription = '';
        if (description) {
          eventDescription += `Description: ${description}\n`;
        }
        
        if (plannedTSS > 0 || actualTSS !== undefined) {
          eventDescription += `Planned TSS: ${plannedTSS}\n`;
          if (actualTSS !== undefined) {
            eventDescription += `Actual TSS: ${actualTSS}\n`;
          }
        }
        
        eventDescription += `Week: ${weekRow['Week #'] || `Week ${weekIndex + 1}`}\n`;
        eventDescription += `\nGenerated by Ultramarathon Training Plan`;

        events.push({
          title,
          description: eventDescription,
          startDate,
          endDate
        });
      });
    }

    return events;
  };

  const handleExportICS = async () => {
    setIsExporting(true);
    try {
      const events = generateCalendarEvents();
      const icsContent = generateICSContent(events);
      downloadICSFile(icsContent, 'ultramarathon-training-plan.ics');
    } catch (error) {
      console.error('Error exporting to ICS:', error);
      alert('Error exporting calendar. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <button
      onClick={handleExportICS}
      disabled={isExporting}
      className="flex items-center px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200"
    >
      {isExporting ? (
        <>
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
          Exporting...
        </>
      ) : (
        <>
          <Calendar className="w-4 h-4 mr-2" />
          Export Calendar
        </>
      )}
    </button>
  );
};